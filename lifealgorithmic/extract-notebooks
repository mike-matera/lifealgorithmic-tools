#! /usr/bin/env python
"""
Extract Jupyter Notebooks from a Canvas ZIP as HTML.
"""

import asyncio
import shutil
import subprocess
import argparse
import logging
import multiprocessing
from pathlib import Path

from lifealgorithmic.canvas import Submissions

#logging.basicConfig(level=logging.DEBUG)

parser = argparse.ArgumentParser(
    description="Extract Jupyter notebooks from a Canvas submissions.zip as HTML",
)
parser.add_argument('zip', nargs=1, help='A Canvas submissions.zip')
parser.add_argument('output', nargs=1, help='Output base file.')
parser.add_argument('--users', help='A comma separated list of users.')
parser.add_argument('--execute', action='store_true', help='Execute notebooks during conversion.')


async def worker(queue):
    while not queue.empty(): 
        task = await queue.get()
        proc = await asyncio.create_subprocess_shell(task['cmd'], cwd=task['cwd'])
        await proc.wait()
        queue.task_done()


async def main():
    args = parser.parse_args()

    outfile = Path(args.output[0])
    if outfile.exists():
        raise FileExistsError(outfile)

    nbconvert_flags = ""
    if args.execute:
        nbconvert_flags += "--execute "

    loop = asyncio.get_event_loop()
    queue = asyncio.Queue()

    users = None
    if args.users is not None:
        users = args.users.split(',')

    subs = Submissions(args.zip[0], users=users)
    for user, path in subs.users():
        for found in path.glob('**/*.ipynb'):
            if ".ipynb_checkpoints" not in str(found): 
                await queue.put({
                    'cmd': f'jupyter nbconvert {nbconvert_flags} "{found}"',
                    'cwd': path,
                })

    for _ in range(multiprocessing.cpu_count()):
        loop.create_task(worker(queue))

    print('Waiting for queue to empty.')
    await queue.join()

    shutil.make_archive(outfile.with_suffix(''), outfile.suffix[1:], subs.workdir())


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    loop.close()
 