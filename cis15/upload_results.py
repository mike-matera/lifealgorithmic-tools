"""
Upload results generated by test_subs.py
"""

import re

from canvasapi import Canvas
from pathlib import Path
import sys

import os
import shutil
import subprocess
import argparse
import logging
from pathlib import Path
from yaml import load, Loader

from lifealgorithmic.canvas import Results
import tempfile

# Secrets in the prefs file.
prefs_file = Path(os.getenv('HOME')) / '.canvasapi'
with open(prefs_file) as f:
    prefs = load(f, Loader=Loader)

if 'GRADER_DEBUG' in os.environ:
    logging.basicConfig(level=logging.DEBUG)

parser = argparse.ArgumentParser(
    description="Upload the results of a grader run.",
)
parser.add_argument('results', nargs=1, help='A results ZIP file.')
parser.add_argument('course_id', nargs=1, type=int, help='The course ID.')
parser.add_argument('assignment_id', nargs=1, type=int, help='The assignment ID.')
parser.add_argument('--users', help='A comma separated list of users')


def main():
    args = parser.parse_args()
    course_id = int(args.course_id[0])
    assignment_id = int(args.assignment_id[0])

    users = None
    if args.users is not None:
        users = args.users.split(',')

    r = Results(args.results[0], users=users)

    # Initialize a new Canvas object
    canvas = Canvas(prefs['API_URL'], prefs['API_KEY'])

    course = canvas.get_course(int(course_id))
    proj = course.get_assignment(int(assignment_id))
    course_users = course.get_users()
    user_idmap = {}
    for user in course_users:
        filebase = user.sortable_name
        filebase = re.sub(r'(,|\s*)', '', filebase)
        filebase = filebase.lower()
        user_idmap[filebase] = user

    with tempfile.TemporaryDirectory() as d:
        temp = Path(d)

        for user, path in r.users():
            print(f'Uploading user {user}')
            archive = shutil.make_archive(temp / user, "zip", path)
            user_id = user_idmap[user].id

            with open(path / 'comments.log') as r:
                result_txt = r.read()

            sub = proj.get_submission(user_id)
            up = sub.upload_comment(archive)
            sub.edit(comment = {'text_comment': result_txt, 'file_ids': [up[1]['id']]})


if __name__ == '__main__':
    main()

